Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.std_logic_unsigned.all;
Use IEEE.std_logic_arith.all;
Use work.mis_componentes.all;
---------------------------------------------------------------------------------------------------------
ENTITY MATRIZ_PARQUEADERO IS
PORT(	START: 				In std_logic;
		INGRESAR: 			In std_logic;
		SALIR: 				In std_logic;
		COD_AUTO_SALIDA: 	In std_logic_vector(3 downto 0);
		RESET: 				In std_logic;
		CLOCK: 				In std_logic;
		CLOCK_1Hz: 			In std_logic;
		CLOCK_100Hz:		In std_logic;
		ENTRADA: 			Out std_logic;
		SALIDA: 				Out std_logic;
		DENEGADO: 			Out std_logic;
		COLUMNA_MATRIZ:	Out std_logic_vector(3 downto 0);
		FILA_MATRIZ:		Out std_logic_vector(3 downto 0);
		COLUMNA_LIB:		Out std_logic_vector(6 downto 0);
		FILA_LIB:			Out std_logic_vector(6 downto 0);
		DEC_P_LIBRES:		Out std_logic_vector(6 downto 0);
		UNID_P_LIBRES:		Out std_logic_vector(6 downto 0));
END MATRIZ_PARQUEADERO; 
---------------------------------------------------------------------------------------------------------
ARCHITECTURE estructural OF MATRIZ_PARQUEADERO IS
-------------------------------------------------------------------------------------------------------------
TYPE ESTADO IS (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15);
SIGNAL Y: ESTADO;

SIGNAL EN_CONT_DIRECC, RESET_CONT_DIRECC: std_logic;
SIGNAL DIRECCION: std_logic_vector(3 downto 0);
SIGNAL UNO_CERO, WR, OCUPADO: std_logic;
SIGNAL ADDRESS_RAM: std_logic_vector(3 downto 0);
SIGNAL CARRO_SALIDA: std_logic;
SIGNAL EN_TIME, RESET_TIME, IG_3SEG: std_logic;
SIGNAL TIME_PARPADEO: std_logic_vector(3 downto 0);
SIGNAL EN_CONT_LIBRES, LOAD_CONT_LIBRES, SUMA_PL, RESTA_PL, RESET_CONT_LIBRES, HAY LIBRES: std_logic;
SIGNAL P_LIBRES: std_logic_vector(4 downto 0);
SIGNAL FF1, FF2, FF3, FF4, FF5, FF6, FF7, FF8, FF9, FF10, FF11, FF12, FF13, FF14, FF15, FF16: std_logic;
SIGNAL EN_FF, RESET_FF, RESET_M: std_logic;
SIGNAL P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16: std_logic;
SIGNAL TIME_FF, TIMEFF1, TIMEFF2, TIMEFF3, TIMEFF4, TIMEFF5, TIMEFF6, TIMEFF7, TIMEFF8, TIMEFF9, TIMEFF10, TIMEFF11, TIMEFF12, TIMEFF13, TIMEFF14, TIMEFF15, TIMEFF16: std_logic;
SIGNAL UN_MINUTO: std_logic;
SIGNAL COLUMN_0, COLUMN_1, COLUMN_2, COLUMN_3: std_logic_vector(3 downto 0);
SIGNAL EN_CONT_COLUMN, RESET_CONT_COLUMN: std_logic;
SIGNAL COLUMN_ACTIV: std_logic_vector(1 downto 0);
SIGNAL EN_MATRIZ, C0_ON, C1_ON, C2_ON, C3_ON: std_logic;
SIGNAL APAGAR_1, APAGAR_2: std_logic;
SIGNAL DEC_BCD_P_LIB, UNID_BCD_P_LIB: std_logic_vector(3 downto 0);
SIGNAL COLUMNA_BCD, FILA_BCD: std_logic_vector(3 downto 0);
SIGNAL SIN_USO_0, SIN_USO_1, SIN_USO_2: std_logic;
-------------------------------------------------------------------------------------------------------------
BEGIN
	MSS_TRANSICIONES: PROCESS(RESET, CLOCK)
	BEGIN
		IF RESET='1' THEN Y <= T0;
		ELSIF (CLOCK'EVENT AND CLOCK='1') THEN
			CASE Y IS
				WHEN T0 => IF START='0' THEN Y<=T0; ELSE Y<=T1; END IF;
				WHEN T1 => IF START='1' THEN Y<=T1; ELSE Y<=T2; END IF;
				WHEN T2 => IF FIN_VECES='1' THEN Y<=T3;
							  ELSIF DATA_CERO='0' THEN Y<=T4;
							  ELSE Y<=T2; END IF;
				WHEN T3 => IF START='0' THEN Y<=T3; ELSE Y<=T1; END IF;
				WHEN T4 => IF IG_15ds='1' THEN Y<=T5;
							  ELSIF BOTON_PRESS='1' THEN Y<=T7;
							  ELSE Y<=T4; END IF;
				WHEN T5 => Y<=T8;
				WHEN T6 => IF BOTON_OK='1' THEN Y<=T5; ELSE Y<=T8; END IF;
				WHEN T7 => IF BOTON_PRESS='0' THEN Y<=T6; ELSE Y<=T7; END IF;
				WHEN T8 => Y<=T2;
			END CASE;
		END IF;
	END PROCESS;
	
	MSS_SALIDAS: PROCESS(Y, START, FIN_VECES, DATA_CERO, IG_15ds, BOTON_PRESS, BOTON_OK)
	BEGIN
		RESET_CONT_1A15<='0'; RESET_TIME<='0'; RESET_CONT_VECES<='0'; RESET_REG<='0'; RESET_CONT_ACIERTOS<='0'; RESET_CONT_15ds<='0'; APAGAR<='0'; 
		EN_REG<='0'; EN_REG_BOT<='0'; EN_PROMEDIO<='0'; EN_CONT_15ds<='0'; SUMA_TIME<='0'; EN_CONT_ACIERTOS<='0'; EN_CONT_VECES<='0';
		CASE Y IS
			WHEN T0 =>  RESET_CONT_1A15<='1'; RESET_TIME<='1'; RESET_CONT_VECES<='1'; RESET_REG<='1'; RESET_CONT_ACIERTOS<='1'; RESET_CONT_15ds<='1'; APAGAR<='1'; 
			WHEN T1 =>  RESET_CONT_1A15<='1'; RESET_TIME<='1'; RESET_CONT_VECES<='1'; RESET_REG<='1'; RESET_CONT_ACIERTOS<='1'; RESET_CONT_15ds<='1'; APAGAR<='1'; 
			WHEN T2 =>  IF (FIN_VECES='0' AND DATA_CERO='1') THEN EN_REG<='1'; END IF;
			WHEN T3 =>  EN_PROMEDIO<='1';
			WHEN T4 =>  IF (IG_15ds='0' AND BOTON_PRESS='0') THEN EN_CONT_15ds<='1'; END IF;
			WHEN T5 =>  RESET_CONT_15ds<='1';
			WHEN T6 =>  IF BOTON_OK='1' THEN SUMA_TIME<='1'; EN_CONT_ACIERTOS<='1'; ELSE RESET_CONT_15ds<='1'; END IF;
			WHEN T7 =>  IF BOTON_PRESS='1' THEN EN_REG_BOT<='1'; END IF;
			WHEN T8 =>  RESET_REG<='1'; EN_CONT_VECES<='1';
		END CASE;
	END PROCESS;
	
	FIN_VECES <= (VECES(3) AND VECES(2) AND VECES(1) AND VECES(0));
	DATA_CERO <= NOT(NUM_LED(3) OR NUM_LED(2) OR NUM_LED(1) OR NUM_LED(0));
	BOTON_PRESS <= (BOTONERAS(14) OR BOTONERAS(13) OR BOTONERAS(12) OR BOTONERAS(11) OR BOTONERAS(10) OR BOTONERAS(9) OR BOTONERAS(8) OR BOTONERAS(7) OR BOTONERAS(6) OR BOTONERAS(5) OR BOTONERAS(4) OR BOTONERAS(3) OR BOTONERAS(2) OR BOTONERAS(1) OR BOTONERAS(0));
	IG_15ds <= (TIME_LED(3) AND TIME_LED(2) AND TIME_LED(1) AND TIME_LED(0));

	N_LED_ON <= NUM_LED; -- AUXILIAR
	N_BOTON <= NUM_TECLA; -- AUXILIAR

	CONTADOR_UP_NUM1A15: CONTADOR_UP Port Map("0000", '1', '0', RESET_CONT_1A15, CLOCK_100Hz, NUM_1A15);
	REGISTRO_SOSTENIMIENTO_DIRECCION: REG_SOST Port Map(NUM_1A15, EN_REG, RESET_REG, CLOCK, NUM_LED);
	CONTADOR_UP_VECES: CONTADOR_UP Port Map("0000", EN_CONT_VECES, '0', RESET_CONT_VECES, CLOCK, VECES);
	DEMULTIPLEXADOR_LEDS: DEMUX_1TO16 Port Map('1', NUM_LED, SIN_USO_0, LEDS(0), LEDS(1), LEDS(2), LEDS(3), LEDS(4), LEDS(5), LEDS(6), LEDS(7), LEDS(8), LEDS(9), LEDS(10), LEDS(11), LEDS(12), LEDS(13), LEDS(14));
	CONTADOR_UP_TIME_LED: CONTADOR_UP Port Map("0000", EN_CONT_15ds, '0', RESET_CONT_15ds, CLOCK_10Hz, TIME_LED);
	SUMADOR_TIEMPO: SUMADOR_RETROALIMENTADO Port Map(TIME_LED, SUMA_TIME, '0', RESET_TIME, CLOCK, TIME_TOTAL);
	DECIMAL_A_BINARIO: DECODER_DECIMAL_BINARIO Port Map(BOTONERAS, NUM_BOTONERA);
	REGISTRO_SOSTENIMIENTO_BOTONERA: REG_SOST Port Map(NUM_BOTONERA, EN_REG_BOT, RESET_REG, CLOCK, NUM_TECLA);
	COMPARADOR_TECLA: COMPARADOR Port Map(NUM_LED, NUM_TECLA, SIN_USO_1, BOTON_OK, SIN_USO_2);
	CONTADOR_UP_ACIERTOS: CONTADOR_UP Port Map("0000", EN_CONT_ACIERTOS, '0', RESET_CONT_ACIERTOS, CLOCK, ACIERTOS);
	PROMEDIADOR: PROMEDIO Port Map(TIME_TOTAL, ACIERTOS, EN_PROMEDIO, VELOCIDAD);
	BINARIO_A_BCD_1: DECODER_BINARIO_BCD Port Map(VELOCIDAD, DEC_BCD_VELOC, UNID_BCD_VELOC);
	BINARIO_A_BCD_2: DECODER_BINARIO_BCD Port Map(ACIERTOS, DEC_BCD_ACIERT, UNID_BCD_ACIERT);
	VELOCIDAD_DECENAS: DECODER_7SEG Port Map(DEC_BCD_VELOC, APAGAR, DEC_VELOCIDAD);
	VELOCIDAD_UNIDADES: DECODER_7SEG Port Map(UNID_BCD_VELOC, APAGAR, UNID_VELOCIDAD);
	ACIERTOS_DECENAS: DECODER_7SEG Port Map(DEC_BCD_ACIERT, APAGAR, DEC_ACIERTOS);
	ACIERTOS_UNIDADES: DECODER_7SEG Port Map(UNID_BCD_ACIERT, APAGAR, UNID_ACIERTOS);
	
END estructural;


	